<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<persistence xmlns="https://jakarta.ee/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd"
             version="3.0">

    <persistence-unit name="it" transaction-type="RESOURCE_LOCAL">
        <description>Hibernate Performance Tuning</description>
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <exclude-unlisted-classes>false</exclude-unlisted-classes>

        <properties>
            <!--
            InMemory: In-memory (private) -
                jdbc:h2:mem: __
                only one connection, when the connection close everything will be erase.


            Embedded (local) connection
                jdbc:h2:[file:][<path>]<databaseName>
                jdbc:h2:~/test
                jdbc:h2:file:/data/sample
                jdbc:h2:file:C:/data/sample (Windows only)

                jdbc:h2:/Users/costax/Documents/junk/projects/hibernate-tunings/relationships/db
            -->
            <!--            <property name="jakarta.persistence.jdbc.url" value="jdbc:h2:mem:test"/>-->
            <!--            <property name="jakarta.persistence.jdbc.url" value="jdbc:h2:${project.basedir}/db/jpa-example"/>-->
            <!--            <property name="jakarta.persistence.jdbc.url" value="jdbc:h2:mem:mydb;DB_CLOSE_ON_EXIT=FALSE;MODE=PostgreSQL;INIT=CREATE SCHEMA IF NOT EXISTS calendar"/>-->
            <!--            <property name="jakarta.persistence.jdbc.url" value="jdbc:h2:/Users/costax/Documents/junk/projects/hibernate-tunings/relationships/db/example"/>-->
            <property name="jakarta.persistence.jdbc.url" value="jdbc:h2:./data/hibernationdb"/>


            <property name="jakarta.persistence.jdbc.driver" value="org.h2.Driver"/>


            <property name="jakarta.persistence.jdbc.user" value="sa"/>
            <property name="jakarta.persistence.jdbc.password" value=""/>


            <!--
             jakarta.persistence.schema-generation.database.action
             Defines whether the persistence provider shall create the database,
             first drop and then recreate it, only drop it or do nothing at all.
             If this property is not provided, no schema will be created.

             none, create, drop-and-create, drop
             -->
            <property name="jakarta.persistence.schema-generation.database.action" value="drop-and-create"/>
            <!-- jakarta.persistence.schema-generation.create-source = [metadata, script, metadata-then-script, script-then-metadata]-->
            <property name="jakarta.persistence.schema-generation.create-source" value="metadata"/>
            <property name="jakarta.persistence.sql-load-script-source" value="datos/datos.sql"/>
            <!--
            <property name="jakarta.persistence.schema-generation.create-source" value="metadata-then-script"/>
            <property name="jakarta.persistence.schema-generation.create-script-source" value="datos/extra-creation.sql"/>
            <property name="jakarta.persistence.schema-generation.drop-source" value="script"/>
            <property name="jakarta.persistence.schema-generation.drop-script-source" value="datos/drop.sql"/>
            <property name="jakarta.persistence.sql-load-script-source" value="datos/load-script-source.sql"/>
            -->


            <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
            <!--property name="hibernate.show_sql" value="true"/-->
            <property name="hibernate.format_sql" value="true"/>
            <!--property name="hibernate.use_sql_comments" value="true"/-->
            <property name="hibernate.generate_statistics" value="true"/>

            <!-- show LOG_QUERIES_SLOWER_THAN_MS -->
            <property name="hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS" value="25"/>

            <!--property name="hibernate.connection.release_mode" value="after_transaction"/-->
            <!--property name="hibernate.hbm2ddl.auto" value="create-drop"/ -->
            <!--property name="hibernate.jdbc.bash_size" value="5"/-->

            <!-- Hibernate 5.2.10, introduced the hibernate.connection.provider_disables_autocommit configuration property which tells
            Hibernate that the underlying JDBC Connection(s) already disabled the auto-commit mode.
            -->
            <property name="hibernate.connection.provider_disables_autocommit" value="false"/>


            <property name="hibernate.archive.autodetection" value="class"/>


            <!-- enable batch processing -->
            <property name="hibernate.jdbc.batch_size" value="25"/>
            <property name="hibernate.order_inserts" value="true"/>
            <property name="hibernate.order_updates" value="true"/>
            <property name="hibernate.jdbc.batch_versioned_data" value="true"/>


            <!--
           tell Hibernate which timezone it shall use and set it to a timezone without daylight saving time, e.g. UTC. You can do that with the configuration parameter hibernate.jdbc.time_zone
           -->
            <property name="hibernate.jdbc.time_zone" value="UTC"/>


            <property name="hibernate.physical_naming_strategy"
                      value="io.costax.persistence.api.SnakeCasePhysicalNamingStrategy"/>

        </properties>

    </persistence-unit>
</persistence>
